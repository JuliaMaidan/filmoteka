{"version":3,"file":"static/js/814.4cd7443a.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/Hero/hero.module.scss?2b7e","components/Hero/Hero.jsx","webpack://filmoteka/./src/components/Trending/trending.module.scss?203c","webpack://filmoteka/./src/components/Buttons/buttons.module.scss?d9e5","components/Buttons/Buttons.jsx","webpack://filmoteka/./src/components/Slider/slider.module.scss?8f1a","components/Slider/Slider.jsx","components/Trending/Trending.jsx","pages/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"hero\":\"hero_hero__5mttg\",\"hero__wrapper\":\"hero_hero__wrapper__zhz8-\",\"hero__desc\":\"hero_hero__desc__c1k2l\"};","import styles from './hero.module.scss';\n\nconst Hero = () => {\n  let text = '';\n\n  if (window.innerWidth < 768) {\n    text = 'Stay up-to-date with the latest releases and discover hidden gems.';\n  } else if (window.innerWidth < 1400) {\n    text =\n      'Stay up-to-date with the latest releases and discover hidden gems. Start your cinematic journey today!';\n  } else {\n    text =\n      'Enjoy an immersive experience as you browse through detailed synopses, cast information, and trailers. Stay up-to-date with the latest releases and discover hidden gems. Start your cinematic journey today!';\n  }\n  return (\n    <div className={styles.hero}>\n      <div className={styles.hero__wrapper}>\n        <p className={styles.hero__desc}>{text}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"trending_box__qcn0i\",\"slick-list\":\"trending_slick-list__sf26T\"};","// extracted by mini-css-extract-plugin\nexport default {\"btns_wrapper\":\"buttons_btns_wrapper__eLcIi\",\"btn\":\"buttons_btn__CUq-s\",\"btn__svg\":\"buttons_btn__svg__ASfaf\"};","import { BsPlusLg, BsThreeDots } from \"react-icons/bs\";\nimport { AiOutlineHeart } from \"react-icons/ai\";\nimport styles from \"./buttons.module.scss\";\nimport { Link } from \"react-router-dom\";\n\nconst Buttons = ({ id, addToFavorites, addToWatchingList }) => {\n  return (\n    <div className={styles.btns_wrapper}>\n      <button className={styles.btn} onClick={() => addToWatchingList(id)}>\n        <BsPlusLg className={styles.btn__svg} />\n      </button>\n      <button className={styles.btn} onClick={() => addToFavorites(id)}>\n        <AiOutlineHeart className={styles.btn__svg} />\n      </button>\n      <button className={styles.btn}>\n        <Link to={`/movie/${id}`}>\n          <BsThreeDots className={styles.btn__svg} />\n        </Link>\n      </button>\n    </div>\n  );\n};\n\nexport default Buttons;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"slider_container__CC5hq\",\"caption\":\"slider_caption__sCdIq\",\"slider\":\"slider_slider__LtHb6\",\"slider_btn\":\"slider_slider_btn__fgD-f\",\"slider_svg\":\"slider_slider_svg__YhvfE\",\"paginator\":\"slider_paginator__DytQw\",\"movies\":\"slider_movies__mIALh\",\"movies__item\":\"slider_movies__item__6oxPo\",\"movies__name\":\"slider_movies__name__0O86v\",\"movies__img\":\"slider_movies__img__tUFf9\",\"movies__info\":\"slider_movies__info__0O45o\",\"movies__date\":\"slider_movies__date__A38uz\",\"movies__rate\":\"slider_movies__rate__m-JnO\",\"wrapper\":\"slider_wrapper__vKLcg\",\"movies__svg\":\"slider_movies__svg__igHHW\"};","import React, { useState, useEffect } from 'react';\n// import styles from '../Trending/trending.module.scss';\nimport { AiFillStar, AiOutlineRight, AiOutlineLeft } from 'react-icons/ai';\nimport Buttons from '../Buttons/Buttons';\nimport styles from './slider.module.scss';\n\nconst MovieSlider = ({ movies, title, addToFavorites, addToWatchingList }) => {\n  // const [currentPage, setCurrentPage] = useState(0);\n  // const moviesPerPage = 4;\n  // const totalPages = Math.ceil(movies.length / moviesPerPage);\n\n  // const handleNextPage = () => {\n  //   setCurrentPage(prevPage => prevPage + 1);\n  // };\n\n  // const handlePreviousPage = () => {\n  //   setCurrentPage(prevPage => prevPage - 1);\n  // };\n\n  // const startIndex = currentPage * moviesPerPage;\n  // const visibleMovies = movies.slice(startIndex, startIndex + moviesPerPage);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [moviesPerPage, setMoviesPerPage] = useState(4);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    handleResize(); // Викликаємо при монтуванні компонента, щоб встановити початкове значення\n    window.addEventListener('resize', handleResize); // Додаємо обробник події 'resize'\n\n    return () => {\n      window.removeEventListener('resize', handleResize); // Видаляємо обробник події 'resize' при демонтажі компонента\n    };\n  }, []);\n\n  useEffect(() => {\n    if (windowWidth < 768) {\n      setMoviesPerPage(1);\n    } else if (windowWidth < 1400) {\n      setMoviesPerPage(2);\n    } else {\n      setMoviesPerPage(4);\n    }\n  }, [windowWidth]);\n\n  const totalPages = Math.ceil(movies.length / moviesPerPage);\n\n  const handleNextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  const handlePreviousPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n  };\n\n  const startIndex = currentPage * moviesPerPage;\n  const visibleMovies = movies.slice(startIndex, startIndex + moviesPerPage);\n\n  return (\n    <div className={styles.container}>\n      <h2 className={styles.caption}>{title}</h2>\n      <div className={styles.slider}>\n        <div className={styles.paginator}>\n          <button\n            className={styles.slider_btn}\n            onClick={handlePreviousPage}\n            disabled={currentPage === 0}\n          >\n            <AiOutlineLeft className={styles.slider_svg} />\n          </button>\n          <button\n            className={styles.slider_btn}\n            onClick={handleNextPage}\n            disabled={currentPage === totalPages - 1}\n          >\n            <AiOutlineRight className={styles.slider_svg} />\n          </button>\n        </div>\n        <div className={styles.movies}>\n          {visibleMovies.map(\n            ({\n              name,\n              title,\n              id,\n              backdrop_path,\n              vote_average,\n              release_date,\n            }) => (\n              <div className={styles.movies__item} key={id}>\n                <div className={styles.movies__info}>\n                  <img\n                    className={styles.movies__img}\n                    src={`https://image.tmdb.org/t/p/w780/${backdrop_path}`}\n                    alt={title}\n                    width=\"300\"\n                  />\n                  <p className={styles.movies__name}>{title || name}</p>\n                  <div className={styles.wrapper}>\n                    <p className={styles.movies__date}>{release_date}</p>\n                    <div className={styles.movies__rate}>\n                      <AiFillStar className={styles.movies__svg} />\n                      <p className={styles.movies__vote}>\n                        {vote_average.toFixed(1)}\n                      </p>\n                    </div>\n                  </div>\n                  <Buttons\n                    addToWatchingList={addToWatchingList}\n                    addToFavorites={addToFavorites}\n                    id={id}\n                  />\n                </div>\n\n                <p className={styles.movies__name}>{title || name}</p>\n                <img\n                  className={styles.movies__img}\n                  src={`https://image.tmdb.org/t/p/w780/${backdrop_path}`}\n                  alt={title}\n                  width=\"300\"\n                />\n              </div>\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieSlider;\n","import { useEffect, useState, useMemo } from 'react';\nimport { getMovies } from '../../services/fetchMovies';\nimport styles from './trending.module.scss';\nimport Slider from '../Slider/Slider';\nimport { addToFavorites, addToWatchingList } from '../../services/buttonsLogic';\n\nconst Trending = () => {\n  const [movies, setMovies] = useState([]);\n  const [topRated, setTopRated] = useState([]);\n  const [nowPlaying, setNowPlaying] = useState([]);\n  const [upcoming, setUpcoming] = useState([]);\n  // const [tvPopular, setTvPopular] = useState([]);\n\n  const movieRequests = useMemo(\n    () => [\n      { path: '/trending/all/day', setter: setMovies },\n      { path: '/movie/top_rated', setter: setTopRated },\n      { path: '/movie/now_playing', setter: setNowPlaying },\n      { path: '/movie/upcoming', setter: setUpcoming },\n      // { path: '/tv/top_rated', setter: setTvPopular },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const requests = movieRequests.map(async request => {\n          const data = await getMovies(request.path);\n          request.setter(data.results);\n        });\n\n        await Promise.all(requests);\n      } catch (error) {\n        console.log('Виникла помилка при отриманні даних:', error);\n        throw error;\n      }\n    }\n\n    fetchData();\n  }, [movieRequests]);\n\n  return (\n    <div className={styles.box}>\n      <Slider\n        movies={movies}\n        title=\"New & Popular\"\n        addToFavorites={addToFavorites}\n        addToWatchingList={addToWatchingList}\n      />\n      <Slider\n        movies={nowPlaying}\n        title=\"Today in cinema\"\n        addToFavorites={addToFavorites}\n        addToWatchingList={addToWatchingList}\n      />\n      <Slider\n        movies={upcoming}\n        title=\"Upcoming\"\n        addToFavorites={addToFavorites}\n        addToWatchingList={addToWatchingList}\n      />\n      {/* <Slider\n        movies={tvPopular}\n        title=\"Top rated series\"\n        addToFavorites={addToFavorites}\n        addToWatchingList={addToWatchingList}\n      /> */}\n      <Slider\n        movies={topRated}\n        title=\"Top rated movies\"\n        addToFavorites={addToFavorites}\n        addToWatchingList={addToWatchingList}\n      />\n    </div>\n  );\n};\n\nexport default Trending;\n","import React from 'react';\nimport Hero from '../components/Hero/Hero';\nimport Trending from '../components/Trending/Trending';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Hero />\n      <Trending />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["text","window","innerWidth","className","styles","id","addToFavorites","addToWatchingList","onClick","to","movies","title","useState","currentPage","setCurrentPage","moviesPerPage","setMoviesPerPage","windowWidth","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","totalPages","Math","ceil","length","startIndex","visibleMovies","slice","prevPage","disabled","map","name","backdrop_path","vote_average","release_date","src","alt","width","toFixed","setMovies","topRated","setTopRated","nowPlaying","setNowPlaying","upcoming","setUpcoming","movieRequests","useMemo","path","setter","requests","request","getMovies","data","results","Promise","all","console","log","fetchData","Slider"],"sourceRoot":""}