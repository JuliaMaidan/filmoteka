{"version":3,"file":"static/js/846.989d1eda.chunk.js","mappings":"2IACA,MAA2B,2B,SCQ3B,EAPiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClB,OACE,gBAAKC,UAAWC,EAAhB,UACE,uBAAIF,KAGT,C,yFCPD,EAAyB,6BAAzB,EAA6H,mCAA7H,EAA8K,kCAA9K,EAA+N,mCAA/N,EAAgR,kCAAhR,EAAgU,kCAAhU,EAAkX,oC,SCmClX,EA/BqB,SAAC,GAA+B,IAA7BG,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cAC9B,OACE,eAAIH,UAAWC,EAAf,SACGC,EAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,gBAAIP,UAAWC,EAAf,WACE,gBACED,UAAWC,EACXO,IAAG,0CAAqCD,GACxCE,IAAKH,KAGP,cAAGN,UAAWC,EAAd,SAAqCK,KACrC,iBAAKN,UAAWC,EAAhB,WACE,mBAAQD,UAAWC,EAAnB,UACE,SAAC,KAAD,CAAMS,GAAE,iBAAYL,GAApB,UACE,SAAC,MAAD,CAAQM,KAAM,GAAIX,UAAWC,SAGjC,mBACED,UAAWC,EACXW,QAAS,kBAAMT,EAAcE,EAApB,EAFX,UAIE,SAAC,MAAD,CAAiBM,KAAM,GAAIX,UAAWC,WAlBHI,EAD/B,KA0BjB,C,oICgBD,UA5Ce,WACb,OAAwCQ,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsDF,EAAAA,EAAAA,WAAS,GAA/D,eAAOG,EAAP,KAA4BC,EAA5B,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAASC,aAAaC,QAAQ,gBAC9BC,EAAYH,EAASI,KAAKC,MAAML,GAAU,GAE1CM,EAAiB,mCAAG,6GAEDC,QAAQC,IAC3BL,EAAUlB,KAAI,SAAAC,GAAE,OAAIuB,EAAAA,EAAAA,IAAgBvB,EAApB,KAHI,OAEhBH,EAFgB,OAKtBa,EAAgBb,GALM,gDAOtB2B,QAAQC,IAAI,0NAAZ,MAPsB,yDAAH,qDAUvBL,GACD,GAAE,CAACT,IAaJ,OACE,iBAAKhB,UAAWC,EAAAA,EAAAA,UAAhB,WACE,eAAID,UAAWC,EAAAA,EAAAA,MAAf,2BACyB,IAAxBa,EAAaiB,QACZ,SAAC,IAAD,CAAUhC,KAAK,8CAEf,SAAC,IAAD,CAAcG,OAAQY,EAAcX,cAjBpB,SAAAE,GACpB,IAAMc,EAASC,aAAaC,QAAQ,gBAE9BW,GADYb,EAASI,KAAKC,MAAML,GAAU,IAClBc,QAAO,SAAAC,GAAO,OAAIA,IAAYC,SAAS9B,EAAzB,IAC5CU,EAAgBiB,GAChBZ,aAAagB,QAAQ,eAAgBb,KAAKc,UAAUL,IACpDH,QAAQC,IAAIzB,GAEZY,GAAwBD,EACzB,MAYF,C,qBC/CD,KAAgB,UAAY,0BAA0B,MAAQ,sB","sources":["webpack://filmoteka/./src/components/NotFound/notFound.module.scss?65a4","components/NotFound/NotFound.jsx","webpack://filmoteka/./src/components/WatchingList/watchingList.module.scss?a3e6","components/WatchingList/WatchingList.jsx","pages/MyList.jsx","webpack://filmoteka/./src/components/styled/myList.module.scss?9fa7"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"notfound\":\"notFound_notfound__kFEWF\"};","import styles from \"./notFound.module.scss\";\n\nconst NotFound = ({ text }) => {\n  return (\n    <div className={styles.notfound}>\n      <p>{text}</p>\n    </div>\n  );\n};\nexport default NotFound;\n","// extracted by mini-css-extract-plugin\nexport default {\"mylist\":\"watchingList_mylist__tXrMM\",\"mylist__wrapper\":\"watchingList_mylist__wrapper__2dTRd\",\"mylist__item\":\"watchingList_mylist__item__YsMJK\",\"mylist__img\":\"watchingList_mylist__img__ZAZbd\",\"mylist__btns\":\"watchingList_mylist__btns__VpGAQ\",\"mylist__btn\":\"watchingList_mylist__btn__AgHfC\",\"mylist__svg\":\"watchingList_mylist__svg__ibbHR\",\"mylist__title\":\"watchingList_mylist__title__Q5vR3\"};","import { Link } from 'react-router-dom';\nimport { BsInfo } from 'react-icons/bs';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport styles from './watchingList.module.scss';\n\nconst WatchingList = ({ movies, onDeleteClick }) => {\n  return (\n    <ul className={styles.mylist}>\n      {movies.map(({ id, title, poster_path }) => (\n        <li className={styles.mylist__item} key={id}>\n          <img\n            className={styles.mylist__img}\n            src={`https://image.tmdb.org/t/p/w780/${poster_path}`}\n            alt={title}\n            // width=\"205\"\n          />\n          <p className={styles.mylist__title}>{title}</p>\n          <div className={styles.mylist__btns}>\n            <button className={styles.mylist__btn}>\n              <Link to={`/movie/${id}`}>\n                <BsInfo size={30} className={styles.mylist__svg} />\n              </Link>\n            </button>\n            <button\n              className={styles.mylist__btn}\n              onClick={() => onDeleteClick(id)}\n            >\n              <AiOutlineDelete size={22} className={styles.mylist__svg} />\n            </button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default WatchingList;\n","import { useState, useEffect } from 'react';\nimport { getMovieDetails } from '../services/fetchMovies';\nimport styles from '../components/styled/myList.module.scss';\nimport NotFound from '../components/NotFound/NotFound';\nimport WatchingList from '../components/WatchingList/WatchingList';\n\nconst MyList = () => {\n  const [watchingList, setWatchingList] = useState([]);\n  const [watchingListUpdated, setWatchingListUpdated] = useState(false);\n\n  useEffect(() => {\n    const myList = localStorage.getItem('watchingList');\n    const myListIds = myList ? JSON.parse(myList) : [];\n\n    const fetchWatchingList = async () => {\n      try {\n        const movies = await Promise.all(\n          myListIds.map(id => getMovieDetails(id))\n        );\n        setWatchingList(movies);\n      } catch (error) {\n        console.log('Помилка при отриманні улюблених фільмів:', error);\n      }\n    };\n    fetchWatchingList();\n  }, [watchingListUpdated]);\n\n  const onDeleteClick = id => {\n    const myList = localStorage.getItem('watchingList');\n    const myListIds = myList ? JSON.parse(myList) : [];\n    const updatedList = myListIds.filter(movieId => movieId !== parseInt(id));\n    setWatchingList(updatedList);\n    localStorage.setItem('watchingList', JSON.stringify(updatedList));\n    console.log(id);\n\n    setWatchingListUpdated(!watchingListUpdated);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Watching list</h1>\n      {watchingList.length === 0 ? (\n        <NotFound text=\"Firstly add movies to your watching list\" />\n      ) : (\n        <WatchingList movies={watchingList} onDeleteClick={onDeleteClick} />\n      )}\n    </div>\n  );\n};\n\nexport default MyList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"myList_container__wGjPG\",\"title\":\"myList_title__0Gxpf\"};"],"names":["text","className","styles","movies","onDeleteClick","map","id","title","poster_path","src","alt","to","size","onClick","useState","watchingList","setWatchingList","watchingListUpdated","setWatchingListUpdated","useEffect","myList","localStorage","getItem","myListIds","JSON","parse","fetchWatchingList","Promise","all","getMovieDetails","console","log","length","updatedList","filter","movieId","parseInt","setItem","stringify"],"sourceRoot":""}