{"version":3,"file":"static/js/906.8c4250a3.chunk.js","mappings":"2IACA,MAA2B,2B,SCQ3B,EAPiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClB,OACE,gBAAKC,UAAWC,EAAhB,UACE,uBAAIF,KAGT,C,6LCPD,GAAgB,UAAY,0BAA0B,OAAS,uBAAuB,cAAgB,8BAA8B,YAAc,4BAA4B,YAAc,6B,mBC4G5L,EAjGe,WACb,IAAMG,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAoCN,EAAAA,EAAAA,UAAS,GAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAkCR,EAAAA,EAAAA,WAAS,GAA3C,eAAOS,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRV,EAAK,UAAGH,EAAac,IAAI,gBAApB,QAAgC,GAC3C,GAAKX,EAAL,CACA,IAAMY,EAAmB,mCAAG,8GAEKC,EAAAA,EAAAA,IAAkBb,EAAOI,GAF9B,OAElBU,EAFkB,OAGxBX,EAAUW,EAAeC,SACzBR,EAAcO,EAAeE,aAC7BP,GAAa,GACbQ,QAAQC,IAAIJ,GANY,kDASxBG,QAAQC,IAAR,MACApB,EAAgB,IAVQ,0DAAH,qDAazBc,IACAH,GAAa,EAfK,CAgBnB,GAAE,CAACZ,EAAcC,EAAiBM,IA0BnC,OACE,iBAAKZ,UAAWC,EAAAA,UAAhB,WACE,kBAAMD,UAAWC,EAAAA,OAAe0B,OAAO,SAASC,SAtB/B,SAACC,GAAM,wCAG1B,8GAEiCR,EAAAA,EAAAA,IAAkBb,EAAOI,GAF1D,OAEUU,EAFV,OAGIX,EAAUW,EAAeC,SACzBR,EAAcO,EAAeE,aAJjC,gDAMIC,QAAQC,IAAR,MACApB,EAAgB,IAPpB,0DAH0B,sBAC1BuB,EAAEC,iBACF5B,EAAS,iBAAD,OAAkBM,IAFA,mCAa1BY,EACD,EAQG,WACE,kBACEpB,UAAWC,EAAAA,cACX8B,KAAK,OACLC,SA9Ba,SAACH,GACpBpB,EAASoB,EAAEI,cAAcC,MAAMC,cAChC,KA8BK,mBAAQnC,UAAWC,EAAAA,YAAnB,UACE,SAAC,MAAD,CAAUD,UAAWC,EAAAA,YAAoBmC,KAAM,WAGnD,iBAAKpC,UAAWC,EAAAA,QAAhB,UACqB,IAAlBS,EAAO2B,SAAgB,SAACC,EAAA,EAAD,CAAUvC,KAAK,uBACtCiB,IAAa,SAACuB,EAAA,EAAD,IACb7B,EAAO2B,OAAS,IACf,4BACE,SAACG,EAAA,EAAD,CAAa9B,OAAQA,KACrB,SAAC+B,EAAA,EAAD,CACEC,MAAO5B,EACPF,YAAaA,EACb+B,iBAzBa,SAACC,EAAOC,GAC/BhC,EAAegC,EAChB,YA0CF,C","sources":["webpack://filmoteka/./src/components/NotFound/notFound.module.scss?65a4","components/NotFound/NotFound.jsx","webpack://filmoteka/./src/components/styled/search.module.scss?98bc","pages/Search.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"notfound\":\"notFound_notfound__kFEWF\"};","import styles from \"./notFound.module.scss\";\n\nconst NotFound = ({ text }) => {\n  return (\n    <div className={styles.notfound}>\n      <p>{text}</p>\n    </div>\n  );\n};\nexport default NotFound;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"search_container__pes1o\",\"search\":\"search_search__mrQCm\",\"search__input\":\"search_search__input__kz-8x\",\"search__btn\":\"search_search__btn__sjknB\",\"search__svg\":\"search_search__svg__d3LIO\"};","// import Search from \"../components/Search/Search\";\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useNavigate } from \"react-router\";\nimport { getSearchedMovies } from \"../services/fetchMovies\";\nimport { CiSearch } from \"react-icons/ci\";\nimport NotFound from \"../components/NotFound/NotFound\";\nimport PostersList from \"../components/PostersList/PostersList\";\nimport Paginator from \"../components/Paginator/Paginator\";\nimport styles from \"../components/styled/search.module.scss\";\nimport Loader from \"../components/Loader/Loader\";\n\nconst Search = () => {\n  const navigate = useNavigate();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const query = searchParams.get(\"query\") ?? \"\";\n    if (!query) return;\n    const fetchSearchedMovies = async () => {\n      try {\n        const searchedMovies = await getSearchedMovies(query, currentPage);\n        setMovies(searchedMovies.results);\n        setTotalPages(searchedMovies.total_pages);\n        setIsLoading(true);\n        console.log(searchedMovies);\n        // setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n        setSearchParams(\"\");\n      }\n    };\n    fetchSearchedMovies();\n    setIsLoading(false);\n  }, [searchParams, setSearchParams, currentPage]);\n\n  const handleChange = (e) => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    navigate(`/search?query=${query}`);\n    async function fetchSearchedMovies() {\n      try {\n        const searchedMovies = await getSearchedMovies(query, currentPage);\n        setMovies(searchedMovies.results);\n        setTotalPages(searchedMovies.total_pages);\n      } catch (error) {\n        console.log(error);\n        setSearchParams(\"\");\n      }\n    }\n    fetchSearchedMovies();\n  };\n\n  const handlePageChange = (event, page) => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <div className={styles.container}>\n      <form className={styles.search} action=\"submit\" onSubmit={handleSubmit}>\n        <input\n          className={styles.search__input}\n          type=\"text\"\n          onChange={handleChange}\n        />\n        <button className={styles.search__btn}>\n          <CiSearch className={styles.search__svg} size={22} />\n        </button>\n      </form>\n      <div className={styles.wrapper}>\n        {movies.length === 0 && <NotFound text=\"Search by key-word\" />}\n        {isLoading && <Loader />}\n        {movies.length > 0 && (\n          <div>\n            <PostersList movies={movies} />\n            <Paginator\n              count={totalPages}\n              currentPage={currentPage}\n              handlePageChange={handlePageChange}\n            />\n          </div>\n        )}\n        {/* {movies.length > 0 ? (\n          <Loader />\n        ) : (\n          <div>\n            <PostersList movies={movies} />\n            <Paginator\n              count={totalPages}\n              currentPage={currentPage}\n              handlePageChange={handlePageChange}\n            />\n          </div>\n        )} */}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n"],"names":["text","className","styles","navigate","useNavigate","useSearchParams","searchParams","setSearchParams","useState","query","setQuery","movies","setMovies","currentPage","setCurrentPage","totalPages","setTotalPages","isLoading","setIsLoading","useEffect","get","fetchSearchedMovies","getSearchedMovies","searchedMovies","results","total_pages","console","log","action","onSubmit","e","preventDefault","type","onChange","currentTarget","value","toLowerCase","size","length","NotFound","Loader","PostersList","Paginator","count","handlePageChange","event","page"],"sourceRoot":""}